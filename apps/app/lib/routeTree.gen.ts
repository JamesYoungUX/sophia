/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../routes/__root'
import { Route as PatientsRouteImport } from './../routes/patients'
import { Route as HistoryRouteImport } from './../routes/history'
import { Route as DashboardRouteImport } from './../routes/dashboard'
import { Route as ClinicalSupportRouteImport } from './../routes/clinical-support'
import { Route as AccountRouteImport } from './../routes/account'
import { Route as AboutRouteImport } from './../routes/about'
import { Route as IndexRouteImport } from './../routes/index'

const PatientsRoute = PatientsRouteImport.update({
  id: '/patients',
  path: '/patients',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoryRoute = HistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ClinicalSupportRoute = ClinicalSupportRouteImport.update({
  id: '/clinical-support',
  path: '/clinical-support',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/clinical-support': typeof ClinicalSupportRoute
  '/dashboard': typeof DashboardRoute
  '/history': typeof HistoryRoute
  '/patients': typeof PatientsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/clinical-support': typeof ClinicalSupportRoute
  '/dashboard': typeof DashboardRoute
  '/history': typeof HistoryRoute
  '/patients': typeof PatientsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/clinical-support': typeof ClinicalSupportRoute
  '/dashboard': typeof DashboardRoute
  '/history': typeof HistoryRoute
  '/patients': typeof PatientsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/account'
    | '/clinical-support'
    | '/dashboard'
    | '/history'
    | '/patients'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/account'
    | '/clinical-support'
    | '/dashboard'
    | '/history'
    | '/patients'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/account'
    | '/clinical-support'
    | '/dashboard'
    | '/history'
    | '/patients'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AccountRoute: typeof AccountRoute
  ClinicalSupportRoute: typeof ClinicalSupportRoute
  DashboardRoute: typeof DashboardRoute
  HistoryRoute: typeof HistoryRoute
  PatientsRoute: typeof PatientsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/patients': {
      id: '/patients'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof PatientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clinical-support': {
      id: '/clinical-support'
      path: '/clinical-support'
      fullPath: '/clinical-support'
      preLoaderRoute: typeof ClinicalSupportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AccountRoute: AccountRoute,
  ClinicalSupportRoute: ClinicalSupportRoute,
  DashboardRoute: DashboardRoute,
  HistoryRoute: HistoryRoute,
  PatientsRoute: PatientsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
